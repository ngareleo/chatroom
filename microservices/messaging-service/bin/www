#!/usr/bin/env node

const app = require('../app');
const dotenv = require('dotenv')
const debug = require('debug')('messaging-service:server');
const http = require('http');
const server = http.createServer(app);
const { Server } = require("socket.io");
const Schema = require('../models/message');
const cleanData = require('../controller/worker');
const express = require('express');

dotenv.config();

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


const io = new Server(server);


io.on('connection', async (socket) => {
  let data = await Schema.find({});
  let user1ID, user2ID;
  socket.on("message-sent", async (dt) => {
    let data = await Schema.find({});
    socket.emit('data', cleanData(data));
    socket.broadcast.emit('data', cleanData(data));
  });

  socket.emit('user-information');
  socket.emit('data', cleanData(data));
  socket.on('disconnect', (reason) => {
    if (user1ID != undefined && socket.id === user1ID){
      console.log(`User 1 has disconnected`);
      user1ID = undefined;
      socket.emit("u1-offline");
    }
    else if (user2ID != undefined && socket.id === user2ID){
      console.log(`User 2 has disconnected`);
      user2ID = undefined;
      socket.emit("u2-offline");
    }
  });

  socket.on("user-info", (data) => {
    const pn = data.pathname;
    if (pn != undefined && pn === "/user1"){
      user1ID = socket.id;
      console.log("User 1 has connected");
      socket.emit("u1-online");
    }else if (pn != undefined & pn === "/user2"){
      user2ID = socket.id;
      console.log("User 2 has connected");
      socket.emit("u2-online");
    }
  });

});



server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`Messaging service is listening on http://localhost:${addr.port}`);
  io.on('Connection', (socket) => {
    console.log("Connection made");
  });
}
